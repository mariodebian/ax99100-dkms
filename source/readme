Building the Driver and application:
--------------------
	Run the following command in the driver source folder:
		$ make

	Once the driver is compliled, the loadable module ax99100.ko will be created in the same folder.

	**  '$' --this symbol represents the shell prompt on linux			

Loading the Driver:
-------------------
	
	To load the driver use the following command:
		$ insmod ax99100.ko

	**  '$' --this symbol represent the shell prompt on linux			

Unloading the Driver:
---------------------

	To unload the driver use the following command:
		$rmmod ax99100

	**  '$' --this symbol represent the shell prompt on linux			

Installing the Serial Port Driver:
----------------------

	To install the driver use the following command:
		
		make install

Uninstalling the Serial Port Driver:
------------------------

	To un-install the driver use the following command:
		
		make uninstall

Features Supported:
-------------------

	The driver supports all the features supported by the AX99100 serial device.
		Note: only baud rates upto 3.0Mbps are implemented in the current driver.
	
Feature Configuration:
----------------------

  AX99100:
  --------

	This driver comes with a static array uart_99100_contxts[ ] for all the 16 ports features in the 99100.c file.
	Where you can set the features like:
		-DMA in RX
		-DMA in TX
		-enable/disable Flow control
		-Flow control type
		-RX fifo trigger level
		-TX fifo trigger level
		-x-on character
		-x-off character

	An example array setting for PORT 0 which will be recognised as /dev/ttyF0:			

	//Port 0	--**This represents that this setting is for port 0 which will be recognised as /dev/ttyF0
	{
		.rx_dma_en	= 0,
		.tx_dma_en	= 0,
		.uart_mode	= AX99100_RS232_MODE,
		.en_flow_control= 0,
		.flow_ctrl_type = AX99100_XON_XOFF_HW_FLOWCONTROL,
		.rxfifotrigger	= 64,
		.txfifotrigger	= 64,		
		.x_on		= SERIAL_DEF_XON,
		.x_off		= SERIAL_DEF_XOFF,
	},

	To change the port to different modes for uart_mode settings use the following,

	AX99100_RS422_MODE           	(422 mode)
	AX99100_RS485_HALF_DUPLEX    	(485 half duplex)
	AX99100_RS485_HALF_DUPLEX_ECHO	(485 half duplex echo)
	AX99100_RS485_FULL_DUPLEX    	(485 full duplex)
	AX99100_RS485_FULL_DUPLEX_TXEN	(485 full duplex DxEN)
		
	If you are use AX99100 chip with multi-protocol mode, the uart_99100_contxts[ ] array features need to setup.
	
	{
		...
		.ltc2872_te485 	= 0,
		.ltc2872_dz 	= 0,
		.ltc2872_lb 	= 0,
		.ltc2872_fen 	= 0,
		.pci_config_l0s	= 0,
		.pci_config_l1 	= 0,
	}
Kernels:
--------

	This driver is currently developed and tested on 2.6.13 linux kernel and above 	

Limitations:
------------

	This driver supports a maximum of 4 serial devices. This can be modified as required
	

Steps for setting parallel port :
---------------------------------
        1. rmmod lp
        2. rmmod parport_pc
        2. insmod parport_pc.ko io=bar0 io_hi=bar1 irq=number.

Note: Here, the io, io_hi and irq should be noted from lspci -v.

 
Steps for setting gpio[7:0] :
-----------------------------

	Execute the "gpio_99100" application and the application will show:
			
		Please input the port of AX99100. (ex. /dev/ttyF0):

	After specify the serial port, application will show these selections to access GPIO: 
		0  : GPIO status
		1  : Setup GPIO direction
		2  : GPIO write
		99 : Exit
		:
		
